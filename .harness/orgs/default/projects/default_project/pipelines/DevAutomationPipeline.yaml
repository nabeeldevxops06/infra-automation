pipeline:
  name: Dev-Automation-Pipeline
  identifier: DevAutomationPipeline
  projectIdentifier: default_project
  orgIdentifier: default
  tags: {}
  properties:
    ci:
      codebase:
        connectorRef: infraautomationdev
        build: <+input>
  stages:
    - stage:
        name: Build-Code
        identifier: BuildCode
        description: ""
        type: CI
        spec:
          cloneCodebase: true
          caching:
            enabled: true
            override: true
          execution:
            steps:
              - step:
                  type: GitClone
                  name: GitClone_1
                  identifier: GitClone_1
                  spec:
                    connectorRef: infraautomationdev
                    build:
                      type: branch
                      spec:
                        branch: main
              - step:
                  type: Run
                  name: Run_Validation
                  identifier: Run_Validation
                  spec:
                    shell: Sh
                    command: echo "Harness & GitHub validated."
          infrastructure:
            type: VM
            spec:
              type: Pool
              spec:
                poolName: ubuntu-ci-pool
                harnessImageConnectorRef: account.harnessImage
                os: Linux
    - parallel:
        - stage:
            name: AWS-Deploy
            identifier: AWSDeploy
            description: ""
            type: Custom
            spec:
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Terragrunt-Apply-AWS
                      identifier: TerragruntApplyAWS
                      spec:
                        shell: Bash
                        executionTarget: {}
                        source:
                          type: Inline
                          spec:
                            script: |-
                              cd aws
                              terragrunt init
                              terragrunt apply --auto-approve
                        environmentVariables: []
                        outputVariables: []
                      timeout: 10m
            tags: {}
        - stage:
            name: Azure-Deploy
            identifier: AzureDeploy
            description: ""
            type: Custom
            spec:
              execution:
                steps:
                  - step:
                      type: ShellScript
                      name: Terragrunt-Apply-Azure
                      identifier: TerragruntApplyAzure
                      spec:
                        shell: Bash
                        executionTarget: {}
                        source:
                          type: Inline
                          spec:
                            script: |
                              cd azure
                              terragrunt init
                              terragrunt apply --auto-approve
                        environmentVariables: []
                        outputVariables: []
                      timeout: 10m
            tags: {}
